#include <iostream>

//주석
//설명 역활, 코드로 인식되지 않는다.
int main()
{
	//자료형(크기 단위, byte)
	//정수형: char(1), short(2), int(4), long(4), long long(8)
	//실수형: float, double

	int i = 0;
	 
	// 1바이트로 양수만 표현
	// 256가지 -> 0 ~ 255
	unsigned char c = 0;
	c = 1;

	// 1 바이트로 양수, 음수 둘다 표현
	// -128 ~ 0 ~ 127
	char c1;
//	c1 = -255;
//	std::cout << c1;

	/*
	   음수찾기: 특정 수를 더했을 때 0이 나오는 수를 찾자.
	   이진수의 경우 2의 보수
	   2의 보수법(대응되는 양수의 부호를 반전 후, 1을 더한다)
	*/
	
	int a = 4 + 4.0;
	// 정수 표현방식과 실수 표현방식은 다르다
	// 실수 표현방식은 정밀도에 의존한다.
	// 따라서 double(8)자료형이 float(4)보다 더 아래의 소수점까지 정확하게 표현이 가능하다.
	
	// 정수는 정수끼리, 실수는 실수끼리 연산하되, 두 표현방식의 피 연산자가 연산될 경우 명시적으로 변환하자.
	float f = 10.2415f + (float)20;

	// 실수를 실수로 적을 경우 소수점 뒤에 f를 붙이면 float 자료형으로, f를 붙이지 않으면 double 자료형으로 간주한다.
	
	// 연산자
	// 산술 연산자
	// +, -, *, /, %(모듈러스, 나머지) -> 피연산자가 모두 정수인 경우에만 사용할 수 있는 연산
	// ++, --
	int data = 10 + 10;
	//data = data + 20;
	data += 20;

	data = (int)(10.0 / 3.0);
	
	data = 0;

	a = 10;
	data = a++;
	data--;
	data--;
	// 연산자 오버로딩할 경우 전위연산자의 경우에 문제가 없다. 특별한 이유가 없으면 전위연산자로 쓰자.
	

	// 논리 연산자
	// !(역), &&(곱), ||(합)
	// 참(true), 거짓(false)
	// 참: 0이 아닌 값, 1
	// 거짓: 0
	
	// bool 참이랑 거짓만 다루는 전용 자료형, c++에 추가된 자료형
	bool truefalse = false;
	bool isTrue = 100;

	isTrue = true;
	isTrue = !isTrue;
	isTrue = !100;
	isTrue = 0 && 100;
	isTrue = 0 || 100;
	std::cout << isTrue;



	return 0;
}
